// <auto-generated />
using System;
using AdventureService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AdventureService.Data.Migrations
{
    [DbContext(typeof(AdventureDbContext))]
    partial class AdventureDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Addventure.AdventureService.Models.Adventure", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("CategoryId")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnName("level")
                        .HasMaxLength(15);

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnName("location");

                    b.Property<string>("MainPhotoUrl")
                        .IsRequired()
                        .HasColumnName("main_photo_url")
                        .HasMaxLength(255);

                    b.Property<string[]>("PhotosUrl")
                        .HasColumnName("photos_url");

                    b.Property<int>("Rating")
                        .HasColumnName("rating");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasMaxLength(60);

                    b.HasKey("Id")
                        .HasName("pk_addventure");

                    b.HasIndex("CategoryId")
                        .HasName("ix_addventure_category_id");

                    b.HasIndex("Rating")
                        .HasName("ix_addventure_rating")
                        .HasFilter("rating between 0 and 5");

                    b.ToTable("addventure");
                });

            modelBuilder.Entity("Addventure.AdventureService.Models.AdventureTag", b =>
                {
                    b.Property<string>("AdventureId")
                        .HasColumnName("adventure_id");

                    b.Property<string>("TagName")
                        .HasColumnName("tag_name");

                    b.HasKey("AdventureId", "TagName")
                        .HasName("pk_adventure_tag");

                    b.HasIndex("TagName")
                        .HasName("ix_adventure_tag_tag_name");

                    b.ToTable("adventure_tag");
                });

            modelBuilder.Entity("Addventure.AdventureService.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("Id")
                        .HasName("pk_category");

                    b.ToTable("category");
                });

            modelBuilder.Entity("Addventure.AdventureService.Models.Tag", b =>
                {
                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("name")
                        .HasMaxLength(20);

                    b.HasKey("Name")
                        .HasName("pk_tag");

                    b.ToTable("tag");
                });

            modelBuilder.Entity("Addventure.AdventureService.Models.Adventure", b =>
                {
                    b.HasOne("Addventure.AdventureService.Models.Category", "Category")
                        .WithMany("Adventures")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_addventure_category_category_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Addventure.AdventureService.Models.AdventureTag", b =>
                {
                    b.HasOne("Addventure.AdventureService.Models.Adventure", "Adventure")
                        .WithMany("AdventureTags")
                        .HasForeignKey("AdventureId")
                        .HasConstraintName("fk_adventure_tag_addventure_adventure_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Addventure.AdventureService.Models.Tag", "Tag")
                        .WithMany("AdventureTags")
                        .HasForeignKey("TagName")
                        .HasConstraintName("fk_adventure_tag_tag_tag_name")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
